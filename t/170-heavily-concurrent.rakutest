use v6.d;
use Test::Async <When Base>;

constant MAX-THREADS = 3000;
constant CONC-COUNT = 1100;
BEGIN {
    %*ENV<RAKUDO_MAX_THREADS> = MAX-THREADS;
    $*SCHEDULER = ThreadPoolScheduler.new: max_threads => MAX-THREADS;
}


my $count = 1000;

plan $count + 2,
    :parallel, :!random,
    :test-jobs(CONC-COUNT),
    :job-timeout(120),
    :when( <stress> );

is $*SCHEDULER.max_threads, MAX-THREADS, "max threads set";

my $starter = Promise.new;
my @job-promise;
my atomicint $to-await = $count;
my atomicint $to-complete = $count;

for ^$count -> $id {
    @job-promise.push: my $p = Promise.new;
    subtest "test $id" => {
        $p.keep;
        $*ERR.printf: "before await: %6d\r", --⚛$to-await;
        await $starter;
        $*ERR.printf: "after await : %6d\r", --⚛$to-complete;
        plan 1;
        pass "started $id";
    }
}

await @job-promise;
pass "all started";
$starter.keep;

done-testing;
